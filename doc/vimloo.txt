*vimloo.txt*		OOP in VimL Script		Last change:2017-03-08

version 0.51
Author: lymslive <403708621@qq.com>
License: MIT license

========================================================+=====================
CONTENTS						*vimloo*

1. Concept Introduction					|vimloo-concept|
  1.1 dictionary as class				|vimloo-1.1|
  1.2 autoload class					|vimloo-1.2|
  1.3 copy class as object instance			|vimloo-1.3|
  1.4 copy class as derived class			|vimloo-1.4|
  1.5 copy more class as interface			|vimloo-1.5|
  1.6 isolate class as module				|vimloo-1.6|
2. Base Class Component					|class.vim|
  2.1 member key					|class-member|
  2.2 method key					|class-method|
  2.3 global sharp function				|class-function|
3. Module Management Scheme				|module.vim|
  3.1 import module					|module#import|
  3.2 module less package				|module#less|
  3.3 module unite package				|module#unite|
4. Build Class From Template				|class-builder|
5. Script Micro Command					|script-micro|

========================================================+=====================
1. Concept Introduction					*vimloo-concept*

VimL script can be as simple as several copying lines from the ex command line.
Yet, along with the developing of vim, VimL script also becomes a well featured
language. When come to relative complex situation, VimL can even be assembled 
in the Object Orient Programming(OOP) way.

Please refer to the documents including |user_41.txt| and |eval.txt|, for the
basic concept of VimL, especially the dictionary type and autoload function.

--------------------------------------------------------+---------------------
1.1 dictionary as class					*vimloo-1.1*

Dictionary is the most valuable type in VimL Script. The value saved in a key
can be variable of any type(see |type()|), including ordinary data and fucntion
(FuncRef in fact), and even another dictionary variable(reference).

In the option of class, the data key is class member, and the FuncRef key is 
class method.

The key in a dictionary can be referenced in dictionary way, or in class way.
For example: >
	let dict = {'key': 'val'}
	let dict.key = 'newval'
	echo dict['key']
	echo dict.key
<
Of course, when used in the class way, the key should be an ordinary string
that can be used as identifier.

The class member is simple to defined. It is suggested in class manner, using
|let| command to define each member in each line. The definition of class
method is a bit complex, as the following syntax: >
	function! dict.method() dict abort
		" method function body
		" operate on self which refer to dict
	endfunction
<

This way define an anonymous function, and save the FuncRef in "dict.method".
The special argument "dict" to |:function| predicts that this fucntion must
be call from a dictionary key, and in the function body, a special local 
variable named "self" is refer to the dictionary variable.

--------------------------------------------------------+---------------------
1.2 autoload class					*vimloo-1.2*

When design a class, it is more useful if the class can be used from any other
script, not only the script that just define the calss. Then the |autoload|
mechanism come to be helpful.

For example, a class named "foo" should defined in "autoload/foo.vim" under
some runtime path(see 'rtp'), while "autoload/foo/bar.vim" may be defind a
class named "foo#bar"(Note: "#" is part of the class name).

The autoload script is triggered by sharp function(a global function with "#"
character in it's name). Then we can define a sharp function to return the 
definition of the class(a dictionary variable).

So the primary frame of a VimL calss file is lick following: >
	let s:class = {}
	function! foo#bar#class() abort
		return s:class
	endfunction
	" the other members and methods of s:class
<

The script local variable name "s:class" and sharp function name "#class" is
arbitrary, but isn't cool to use the "reserved" key word "class"?

--------------------------------------------------------+---------------------
1.3 copy class as object instance			*vimloo-1.3*

Now we can get the class definition of "foo#bar" in any script by calling 
"foo#bar#class()". To create a object instance of that class, only call the
builtin function |copy()| or |deepcopy()|, some like following: >
	let c = foo#bar#class()
	let obj = copy(c)
	" use obj to do funny things
<

--------------------------------------------------------+---------------------
1.4 copy class as derived class				*vimloo-1.4*

Derived class is also a copy of the base class, adding some new member or/and
method. For example, to define a "foo#bar#sub" class derived from "foo#bar": >
	let s:base = foo#bar#class()
	let s:class = copy(s:base)
	function! foo#bar#sub#class() abort
		return s:class
	endfunction
	" add more members and methods of s:class
<

Note: the derived class of "foo#bar" is not necessary having longer class name
than it, nor necessary under the "foo/bar/" sub-directory.

--------------------------------------------------------+---------------------
1.5 copy more class as interface			*vimloo-4.5*

Some OOP language supports multiply inheritance, like C++, some language only
supports single inheritance, like java, but supports multiply interface beside
that. The later is relative simple and easy, and seems less buggy.

To make use of multiply interface in VimL Script, can copy the method from 
interface class to self class(dictionary), something like following: >
	let s:base = base#class()
	let s:class = copy(s:base)
	let s:inter1 = inter1#class()
	call extend(s:class, s:inter1)
	let s:inter2 = inter2#class()
	call extend(s:class, s:inter2)
	...
<

How to solve the key conflict is depended on implement or design, see builtin
|extend()|.

--------------------------------------------------------+---------------------
1.6 isolate class as module				*vimloo-4.6*

Module is a collection of utility functions to commom reuse. Class can be 
served as a namespace for module functions. We can save all the functions of
a module in the method key of a class. Such class may no need to have parent,
nor child derived class, even nor object instance, just use the class itself
as a module.

Suppose "foo#bar" is designed as a module now, the primary frame can be like:
>
	let s:class = {}

	function! s:class.func1() dict abort
		" function body
	endfunction

	function! s:class.func2() dict abort
		" function body
	endfunction

	function! foo#bar#import() abort
		return s:class
	endfunction
<

That there is no substance difference from the definition of class. But module
usually has only method key, and in the function body may not use "self" at all.
If we use another sharp function named "#import" to return the "s:class" 
dictionary, then in the user client script, they can use the module as: >
	let s:module = foo#bar#import()
	call s:module.func1()
<

With these concepts in mind, it is easy to write some simple class and object
directly and immediately. But you can do much more with |vimloo|.

========================================================+=====================
2. Vimloo Class Component				*vimloo-class*

In vimloo, we distinguish class objcet and instance object, although both are
no more than dictionary. The class object is class definition dict, a guide to
construct new instance object, which is doing the actual business. Instance is
not necessary the same as class, nor directly copied from class.

Typically, a class file "{rpt}/autoload/foo/bar.vim" defines a class named
"foo#bar" as following: >
	let s:class = {}
	function! foo#bar#class()
		return s:class
	endfunction
<
The class definition is the script scoped dictionary "s:class", and a global
sharp function is provided to access to it.

The keys of "s:class" is properties of the class. Beside the normal data key
and FuncRef key, vimloo also support many special keys, as reserved in the
form "_key_". Those special keys are belong noly to class, not copied to
instance object or child derived class object.

--------------------------------------------------------+---------------------
2.1 Specail Class Properties				*class-property*

s:class._name_
	The name of class, must be consistent with the class file path from
	"autoload", separated by "#". This is a way to get the class file
	script when first only get the class definition dictionary.

s:class._version_
	A optional simple number to denote the version of design of this
	class, maybe helpful in some way.

s:class._mother_
	It is the so called base class or super class in other OOP language.
	It is reference to mother class dictionary, not class name sting.
	It is set automatically when derive from super class, should not
	assign to it manually with ":let" command. See |class#old|.

s:class._object_
	The first created instance object, dictionary reference. Since the
	struct of instance objcet may differ from class, it need to copy each
	individual key in loop, that is ineffective. So we create a hidden
	instance object stored in the key "_object_", and later directly copy
	from it as a whole, when create new instance is required.

s:class._master_
s:class._father_
	These two keys are relative to multiply inherent, and will describe
	more detail in next section. They are list type, witch item is class
	dictionary or class name, and mixed list is also acceptable.

s:class._static_
	A extra list of key, which wont copy to instance object, either.

s:class._protect_
	A extra list of key, which wnot copy to derived class, either.

s:class._custom_
	This means any key that begin and end with "_", can be add freely to
	class, if it is needed and meaningful, but may no effect on instance
	object created by this class.

l:object._class_
	This is not a key in class dictionary, but a special key of instance
	object created by some class, the value of this key is just the
	reference to the class. This is the only special key added by vimloo
	to normal instance object, providing a way to access the origin class
	from instance.

--------------------------------------------------------+---------------------
2.2 Base Class Function					*class-function*

The class defined in the "class.vim" (named "s:class") can be imaged as the 
universal super class of all other user customized class. However, since this
class dictionary has no interesting keys, the main purpose is actually 
providing utility functions to build custome class hierarchy.

We call those function that has one or more "#" characters in it's name as
sharp funtion. Sharp function is autoload function in the global scope. Below
list most(but not all) function in "class.vim".

class#class([{name}])					*class#class*
	Return a dictionary denoted as a class definition.
	With no argument, return the definition of the universal but dummy
	class which is defind as "s:class" dictionary variable in "class.vim".
	With one argument {name}, it is supposed as full class name path, but
	can be separated by "#" or "." or "/". If the class in under
	"autoload/class" sub-directory, the leading "class#" part can also
	ommited.
	For example, if "autoload/class/foo/bar.vim" define a class, all the
	following command can obtain the definition of that class: >
		let c = class#foo#bar#class()
		let c = class#class('class#foo#bar')
		let c = class#class('foo#bar')
		let c = class#class('foo.bar')
		let c = class#class('class/foo.bar')
<
	Though mixed use of "[#./]" separator is acceptable, don't use that
	yet.
	Note: the "class#foo#bar#class()" function must defined in the file
	"autoload/class/foo/bar.vim", otherwise the later "class#class(...)"
	version cannot work either.
	The "#class()" function is the only sharp function that must define
	in the user class file.

class#new({class}, [{arguments}])			*class#new*
	Create and return a object instance. 
	{class} can be already a dict, or a string, and when it is a string,
	class#new() will first call "class#class()" above to get the dict that
	represent a class. Then an object dict is built base on this class dict,
	and initialized with {arguments}.
	{arguments} is a list packed with all arguments. If the specific calss 
	file defines "{class._name_}#ctor()", it is called by this list of
	arguments. See also |calss#ctor|.
	At the first time creating an instance from a class, "class._object_" 
	is also created. Then make a |deepycopy| of "class._object_" as new
	instance, and the "_class_" key is set reference to this class. But
	the hidden "class._object_" has not set "_class_" key, because it is
	not for direct use, and avoid complex cycle reference.

class#old({class}, [{master}, {father}])		*class#old*
	While "class#new()" create object, "class#old()" create derived class. 
	Because in the low level, both are something like copying a dict.
	{class} can be a class dict or class name as "class#new()".
	{master} and {father} are extra arguments for multiply inherent class,
	which will be discussed later, and both are list of class dict or name.
	This fucntion return a dictionary that represent a child derived
	class, and the "_mother_" key of child class is set right to this class.

class#delete({object})					*class#delete*
class#free({object})					*class#free*
	VimL can automatically collect garbage, when local vairable go out of
	scope. But when complex object with circular references, this behave
	will be dalay, see |garbagecollect()|. If you care about this case,
	class#delete() or class#free() maybe helpful.
	They only try to call "{class._name_}#decotr()", you can break out the
	reference cycle in that function. Of course you should only call this
	function just before you decide not use that object any more.

class#isobject({class}, {object})			*class#isobject*
class#isa({class}, {object})				*class#isa*
	class#isobject() check if {object} is created by {class}, return true
	if "{object}._class_" is {class}.
	class#isa() also check the mother and grandmother uptoward the class
	hierarchy, and also check multiply "_master_" and "_father_" case.
	{class} can be a class dictionary or class name, as a common rule.

class#use({class}, [{func-name-list}])			*class#use*
	All function above can be and some encourag to be customized in user
	class file, say define a specific "path#to#class#new()" fucntion.
	When the class name is long, it may become inconvenient. So
	class#use() return a wrapper dictionary or so called package, convert
	the sharp function to a shorter key in this package dictionary. The
	default key are:
		'class': reference to the class dictionary defind in {class}
		'new'  : FuncRef to "path#to#class#new()"
		'isobject': FuncRef to "path#to#class#isobject()"
	So {func-name-list} is default to ['new', 'isobject'].

class#extend({CTarget}, {CSource}, [{option}])		*class#extend*
	As the instance and child class are both special copy of mother class.
	This funtion give more control on how to copy {CSource} to {CTarget},
	which both are class or dictionary vairable. {option} is another
	dictionary accept keys(with default value below):
		'data': v:true, data keys in {CSource} should be copied.
		'func': v:true, copy function keys from {CSource}.
		'new' : v:ture, add new key which non-exisited in {CTarget}.
		'old' : v:ture, overide key that already existed in {CTarget}.
		'ignores': [], not copy these keys in the list.
		'ignorex': '', not copy those keys that match pattern.
		'copy': 1, how to deal with list and dict items in {CSource}:
			0: not copy, share reference, as use = assignment;
			1: use shallow |copy()| builtin function;
			2: use complete |deepcopy()| builtin function.
	For example, when create instance object, the copy option is something
	like: {'ignorex': '^_.*_$', 'ignores': s:class._static_}.

--------------------------------------------------------+---------------------
2.3 User Custom Class					*class-custom*

For an user defind class, say "path#to#class", the only required global
function is "path#to#class#class()" that just return "s:class". But you can
define a serial similar fucntions as "class#func" above, to fit your specail
class design.

To simplify the documentation, we use "tempclass" to denote any "path#to#class".
Actually, there is a "autoload/tempclass.vim" in vimloo, as the template
class, see also |class-builder| section. In this section, will discuss some
most valuable functions.

tempclass#class()
	It is vital, and has been mentioned many times: >
		let s:class = {}
		function! tempclass()
			return s:class
		endfunction
<
tempclass#new(...)
	To create an instance of my class, can simply call "class#new()" with
	"s:class" as the first argument: >
		function! tempclass#new(...)
			let l:obj = class#new(s:class, a:000)
			return l:obj
		endfunction
<
	It is flexible and convenient to define "tempclass#new()" accept
	arbitrary arguments with "...", and passed to "class#new()" as
	"a:000".
	It is worthy to check the input arguments count(|a:0|), and each
	argument(|a:1|, |a:2|, ...) before call "class#new()", may return an
	empty object "{}" or some error.

========================================================+=====================
3. Module Management Scheme				*module.vim*

While class is data with methods, module is mainly focusing on functions to
reuse. In the view of class, it is simpler and easier to create and use module.

To use class, often it need to create an object first, by "#new()" function.
To use module, only need to import that module, then using dictionary key to
index the function from the module.

--------------------------------------------------------+---------------------
3.1 import module					*module#import*

#import			module#import(name, ...)
	The function "module#import()" defined in "autoload/medule.vim" 
	provides a common way to import medules located in autoload script.
	Return a dictionary represent the module, or an empty dictionary if
	fail to import the module.
	The argument {name} is the full path name, relative the "autoload"
	int 'runtimepath', or relative the current directory is also allowed.
	The module name can be separated by "#", "." or "/", and if the module
	file is under "autoload/module" sub-directory, the leading "module#"
	can be ommited.
	"module#import()" try to call the following global sharp functions
	defined in the target module file found: >
		target#path#to#module#import()
		target#path#to#module#instance()
		target#path#to#module#class()
<
	In this order, the first one is called and return.

#simport		module#simport(name, ...)
	Read as script import. Much the same as the "#import()", but expects
	the argument {name} as absolute path or relative path to current
	directory.  In fact the "module#import()" function may also call this
	"module#simport()" function if fail it's first attempt.

	If all the "imported" functions are not defined in the target module
	file.  Another try to open the source script file, and parse the content
	to extract script local functions and global sharp functions, 
	then return a dictionary containing FuncRef of these function.
	The optional arguments {a:000} in "#import()" or "#simport()" is passed
	to the parser, to specify options to include or exclude some function.
		-S, donot import script localed function
		-g, also import global but non-sharp function
		-n, only import these function match the name
		-u, also import private function name begin with _

#cimport		module#cimport(name, ...)
	Read as class import, designed for a special case when you know the
	target {name} is a class file. When fails to call it's "#import()"
	function, get it's class definition by "#class()" function, and then
	build a dictionary with "class" key save the class definition, and
	"new" key save the "#new()" function of the class. That is also the
	suggested stuff to do in the explicitly defined "#import()" function,
	however, you can custom to suit for any need in the explicitly defined 
	"#import()" function.
	
Although these "module#import()" function are powerful, it is suggested to
provide it's own "#import()" function in each module file. It may simple enough
just return a script local dictionary variable, say "s:class".

--------------------------------------------------------+---------------------
3.2 module less package					*module#less*

In the directory "vimloo/autoload/module/less/", is some modules maintained by
myself, following the class manner, each provide it's own "#import()" function.
It is only added when needed, far way from complete or enough.

They can be imported by directlly call it's own "#import()" function, or by
indirectlly call the "module#import()", for example: >
	let s:dict = module#less#dict#import()
	let s:dict = module#import('less.dict')
<

It seems the direct way is a bit shorter.

--------------------------------------------------------+---------------------
3.3 module unite package				*module#unite*

In the directory "vimloo/autoload/module/unite", is the vital utility module
from the |unite.vim| plugin. Each module file in it, is plenty of script local
function. They can be imported by "module#import()" also, for example: >
	let s:List = module#import('unite.Data.List')
<

It is also simple to convert the old style script, to the class-standard
module file:
	first: add a script local dictionary variable in the header >
		let s:class = {}
<
	second: replace all "s:function" to "s:class.function" >
		: g/^\s*function!\?\s\+s:\w\+/s/s:/s:class./
<
	also replce the calling "s:function()" to "s:class.function" if any >
		: %s/s:/s:class./
<
	third: add an import function in the footer >
		function module#unite#Data#List#import()
			return s:class
		endfunction
<

But I havenot do so, make little modification to the origin version.

========================================================+=====================
4. Build Class From Template				*class-builder*

The script "vimloo/autoload/tempclass.vim" is a simplified version of base
"class.vim", it can be served as the template file when create new user class.
The "tempmodule.vim" is a still more simplified version of "tempclass.vim"

:ClassNew {name} [, {filter}]				*:ClassNew*
	Create a new class with {name} in a new script file with that name.
	{name} is append after the current directory, and then configure out
	the full path class name with "#". If the current directory is not under
	some "autoload/" sub-directory, this command will fail.

:ClassAdd [{filter}]					*:ClassAdd*
	Some like the |:ClassNew|, but add class definition at the current editing
	buffer, named after the current file name. If current file is not under
	"autoload/", this command will also fail.
	The directory containing the "autoload/" is not necessary in the
	'runtimepath' on the time. You can add it to "runtimepath" after the plugin
	project is finished or will be tested.

:ClassTemp [{filter}]					*:ClassTemp*
	Some like the |:ClassAdd|, but donot require the current buffer under
	"autoload/". It only copy (part of) "tempclass.vim" to current buffer
	to check what will generate.
	Use ":ClassTemp -a" read the whole "tempclass.vim" into buffer.

:ClassPart {filter}					*:ClassPart*
	Some line |:ClassAdd|, but only add the parts specified in {filter}.
	While |:ClassNew| and |:ClassAdd| will copy some default parts 
	determined by the "tempclass.vim". It is mainly used after the
	|:ClassNew| or |:ClassAdd| has been executed, and then find neen more
	parts.

:ModuleNew {name} [, {filter}]				*:ModuleNew*
	Same as |ClassNew|, but use "tempmodule.vim" to create a new module
	file. "tempmodule.vim" is much simple, and so only provide command
	"ModuleNew".

The argument {filter} in the commands above, is in the form "-xyz" as one
string, each letter control whether a template parts is output, in which 
lowercase indicates output, while uppercase indicates not output.

A part is a paragraph in "tempclass.vim" (or "tempmodule.vim") separated by
blank line. Each part has a head commet line, and at the end of commet line
is the option in the form "-x", where lowercase indicates that this part will
be output by default when |:ClassNew| command etc executed. The arugment
{filter} to the command can overide the default option labeled in the 
template file.

Support at most 25 options, except "-a" reserved means "all". However, more
than one paragraphs are allowed to share a same option letter. A paragraph
without option letter indicates must output, since no {filter} can disable
it.

Now the valid and default option in "tempclass.vim" is list bellow:
	-h: comment header
	-l: reload control code
	-n: #new() function
	-c: #ctor() function
	-D: #dector() function
	-P: #copy() copy constructor function
	-O: #old() function
	-M: #merge() function
	-s: #isobject() function
	-S: #isa() function
	-I: #instance() function
	-Z: #import() function
	-t: #test() function
So the default option is "-hlncst".

The "tempmodule.vim" supports only few option, and the default is "-hzT".

When use |:ClassNew| commands ect. the name of sharp function will be fixed by
the right name according the class name or module name.

It will be also helpful using "ultisnips" or some like plugin, to generate
the frame code snippet of some type of fucntions. |vimloo| provide a function
to get the full class name as used in the form: >
	`!v cmass#util#GetAutoName(expand('%:p:r'))`
<

The quotation `!v {expr}` in "ultisnips" is refer to a vim expression to get 
the result string as output.

========================================================+=====================
5. Script Micro Command					*script-micro*

In the sub-directory "vimloo/autoload/class/" is some pratical classes, 
following these OOP ideas, while in "vimloo/autoload/cmass" is plain scripts
without class burden, mainly a wrapper to use the class.

Some special commands are provided by |vimloo|, which maybe helpful when 
write and debug Viml Script. I call them as "micro" commands, since vim office
already use the word "macro".

:ClassLoad [-r] [-d|D] [filename]			*:ClassLoad*
	Reload a class or script, after make some modification on developing.
	Normally, the reload control code from "tempclass.vim" will protect a
	script from loading the second time, for some reason. However we need
	frequently reload the script when developing and debugging. Then this
	command maybe handful.
	When without argument, default reload the script in current buffer.
	With "-r" option force reload.
	With "-d" option set the "g:DEBUG" variable,
	While "-D" opiton unlet the "g:DEBUG" variable.
	The "g:DEBUG" variable is checked in several cases, to do smart work.

:ClassTest [-f filename] [argument]			*:ClassTest*
	Call the "#test()" function in a script, default the current buffer.
	It is suggested to write a "#test()" function in a script, especially
	class file, as unite test.

:ClassView						*:ClassView*
	Print the members and/or methods of a class, in a more readable way.

:LOGON	{file}						*:LOGON*
:LOGOFF							*:LOGOFF*
	Redir the message to {file}, or stop redir.

:LOG {expr string}					*:LOG*
:SLOG {literal string}					*:SLOG*
	":LOG" require a {expr} as string type, while ":SLOG" requre a literal
	string, for example: >
		:LOG "string"
		:LOG "string" . l:var
		:SLOG string as see
<
	When {string} begin with option-like, it has specail meaning.
	"-number" set the log level of current message
	"-highlight" set the highlight name current message
	If only contain option string without actual message string, then set
	the default log level and highlight.
	When the current log level is smaller than the default log level,
	the current message will be skipped, not echo it.

:ELOG {expr string}					*:ELOG*
:WLOG {expr string}					*:WLOG*
:DLOG {expr string}					*:DLOG*
	With the special highlight name prefix to the message string, and then
	same as ":LOG".
	":ELOG" use "ErrorMsg" highlight
	":WLOG" use "WarningMsg" highlight
	":DLOG" use a virtual "DEBUG" highlight, when "g:DEBUG" not set,
	skip this message.

:PLUGINLOCAL [{file}]					*:PLUGINLOCAL*
:PLUGINAFTER [{file}]					*:PLUGINAFTER*
	These two special commands can only be used in script file, cannot be 
	used in ex command line.
	":PLUGINLOCAL" means "plugin local", it will search the same file
	but with ".local" extention, in the same directory of the script.
	If such file is found, source that file and finish current scipt.
	":PLUGINAFTER" means "plugin after", it does almost the same thing,
	except default to search ".after" file, and donot finish the current
	script.
	These two commands can also explicitly provide a file, to search for.
	Normally, put ":PLUGINLOCAL" in the header of a script, then that 
	scipt can be customized by a ".local" script, and put ":PLUGINAFTER"
	in the footer of script, then that script can be extended by a 
	".after" script. See |vnote-remap| for a example.

========================================================+=====================
vim:tw=78:ts=8:ft=help:norl:
