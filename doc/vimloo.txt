*vimloo.txt*		OOP in VimL Script		Last change:2017-03-08

version 0.51
Author: lymslive <403708621@qq.com>
License: MIT license

========================================================+=====================
CONTENTS						*vimloo*

1. Concept Introduction					|vimloo-concept|
  1.1 dictionary as class				|vimloo-4.1|
  1.2 autoload class					|vimloo-4.2|
  1.3 copy class as object instance			|vimloo-4.3|
  1.4 copy class as derived class			|vimloo-4.4|
  1.5 copy more class as interface			|vimloo-4.5|
  1.6 isolate class as module				|vimloo-4.6|
2. Base Class Component					|class.vim|
  2.1 member key					|class-member|
  2.2 method key					|class-method|
  2.3 global sharp function				|class-function|
3. Module Management Scheme				|module.vim|
  3.1 import module					|module#import|
  3.2 module less package				|module#less|
  3.3 module unite package				|module#unite|
4. Build Class From Template				|class-builder|
5. Script Micro Command					|script-micro|

========================================================+=====================
1. Concept Introduction					*vimloo-concept*

Object Orient Programming(OOP) in VimL Script is relative advance topic 
or tricky skill. But to use |vimloo|, or write scipt in OOP way, is more easy
than it first sounds, since the user need not care about the implement details
of class.

However, the basic concepts of VimL Script is still need to be understood.
Please refer to the relation documents including |user_41.txt|, |eval.txt|.
Of course, the concepts of OOP is also necessary, but that is beyond of this
document.

--------------------------------------------------------+---------------------
1.1 dictionary as class					*vimloo-1.1*

Dictionary is the most variable type in VimL Script. The value saved in a key
can be variable of any type(see |type()|), including ordinary data and fucntion
(FuncRef in fact), and even another dictionary variable(reference).

In the option of class, the data key is class member, and the FuncRef key is 
class method.

The key in a dictionary can be referenced in dictionary way, or in class way.
For example: >
	let dict = {'key': 'val'}
	let dict.key = 'newval'
	echo dict['key']
	echo dict.key
<
Of course, when used in the class way, the key should be an ordinary string
that can be used as identifier.

The class member is simple to defined. It is suggested in class manner, using
|let| command to define each member in each line. The definition of class
method is a bit complex, as the following syntax: >
	function! dict.method() dict abort
		" method function body
		" self refer to dict
	endfunction
<

This way define an anonymous function, and save the FuncRef in "dict.method".
The special argument "dict" to |:function| predicts that this fucntion must
be call from a dictionary key, and in the function body, a special local 
variable named "self" is refer to the dictionary variable.

--------------------------------------------------------+---------------------
1.2 autoload class					*vimloo-1.2*

When design a class, it is more useful if the class can be used from any other
script, not only the script that just define the calss. Then the |autoload|
mechanism come to be helpful.

For example, a class named "foo" should defined in "autoload/foo.vim" under
some runtime path(see 'rtp'), while "autoload/foo/bar.vim" may be defind a
class named "foo#bar"(Note: "#" is part of the class name).

The autoload script is triggered by sharp function(a global function with "#"
character in it's name). Then we can define a sharp function to return the 
definition of the class(a dictionary variable).

So the primary frame of a VimL calss file is lick following: >
	let s:class = {}
	function! foo#bar#class() abort
		return s:class
	endfunction
	" the other members and methods of s:class
<

The script local variable name "s:class" and sharp function name "#class" is
arbitrary, but isn't cool to use the "reserved" key word "class"?

--------------------------------------------------------+---------------------
1.3 copy class as object instance			*vimloo-1.3*

Now we can get the class definition of "foo#bar" in any script by calling 
"foo#bar#class()". To create a object instance of that class, only call the
builtin function |copy()| or |deepcopy()|, some like following: >
	let c = foo#bar#class()
	let obj = copy(c)
	" use obj to do funny things
<

--------------------------------------------------------+---------------------
1.4 copy class as derived class				*vimloo-1.4*

Derived class is also a copy of the base class, adding some new member or/and
method. For example, to define a "foo#bar#sub" class derived from "foo#bar": >
	let s:base = foo#bar#class()
	let s:class = copy(s:base)
	function! foo#bar#sub#class() abort
		return s:class
	endfunction
	" add more members and methods of s:class
<

Note: the derived class of "foo#bar" is not necessary having longer class name
than it, not necessary under the "foo/bar/" sub-directory.

--------------------------------------------------------+---------------------
1.5 copy more class as interface			*vimloo-4.5*

Some OOP language supports multiply inheritance, like C++, some language only
supports single inheritance, like java, but supports multiply interface beside
that. The later is relative simple and easy, and seems less buggy.

To make use of multiply interface in VimL Script, can copy the method from 
interface class to self class(dictionary), something like following: >
	let s:base = base#class()
	let s:class = copy(s:base)
	let s:inter1 = inter1#class()
	call extend(s:class, s:inter1)
	let s:inter2 = inter2#class()
	call extend(s:class, s:inter2)
	...
<

How to solve the key conflict is depended on implement or design, see builtin
|extend()|.

--------------------------------------------------------+---------------------
1.6 isolate class as module				*vimloo-4.6*

Module is a collection of utility functions to commom reuse. Class can be 
served as a namespace for module functions. We can save all the functions of
a module in the method key of a class. Such class may no need to have parent,
nor child derived class, even nor object instance, just use the class itself
as a module.

Suppose "foo#bar" is designed as a module now, the primary frame can be like:
>
	let s:class = {}

	function! s:class.func1() dict abort
		" function body
	endfunction

	function! s:class.func2() dict abort
		" function body
	endfunction

	function! foo#bar#import() abort
		return s:class
	endfunction
<

That there is no substance difference from the definition of class. But module
usually has only method key, and we use another sharp function named "#import"
to return the "s:class" dictionary.

Then in the user client script, they can use the module as following: >
	let s:module = foo#bar#import()
	call s:module.func1()
<

========================================================+=====================
2. Base Class Component					*class.vim*

In the last section, the example code is kept simple, only to describe the 
idea of OOP in VimL Script. This section will document a pratical class, 
provided by |vimloo| in "autoload/class.vim", serving as the common base class
of other custom class.

In "class.vim", there are many keys named in the form of "_xxx_". They are
reserved keys or private keys, with special implement purpose, other derived
calss from it should not redefine their meanings.

User derived class automatically inherit the following member and method. The
shart function is not inherited, must define it's own sharp function if want
to use them. The method should be overide only when necessary.

--------------------------------------------------------+---------------------
2.1 member key						*class-member*

_name_			string
	The name of class. It must match the full path name, relative to 
	"autoload/", separated by "#". It is critical to find the sharp 
	functions in the class script file.
	The user derived class should set it's name explicitly.

_version_		number
	The version of class, maybe useful in some case.

_super_			string
	The name of the base class. The most base class "class.vim" itself has
	no parent, then the "_super_" key to "class" itself.

_interface_		list of string
	The name of the interfaces current class derived. It is list, since
	multiply interfaces are supported. Even if only a interface, it is a
	list of one item. If there no interface, this key may not set.

--------------------------------------------------------+---------------------
2.2 method key						*class-method*

_new_			s:class._new_(argv)
	Called by "#new()" sharp function, when creat new object instance, to
	do the common things for any class. It will try to find the "#ctor()"
	function of the class from which create it. If the usr class donot
	provide "#ctor()" function, "_new_()" method call the dummy function
	"class#ctor()" from the top base class.
	The argument {a:argv} is a list, containing all arugments passed to
	"#new()", usually is {a:000} to handle any number of argument when
	create new instance. This argument is then passed to contruct function
	"#ctor()".

_old_			s:class._old_()
	While "new" create object instance, "old" create derived class, as
	they are both calling the builtin |copy()| funtion.
	"_old_()" method is called when a class neen to derive from self.
	It will set the sub-class's "_super_" member to self's name, and reset
	the sub-class's "_name_" member, requring the sub-class set it's name
	explicitly.

_del_			s:class._del_()
	Called by "class#delete()" function when a object is need destroy.
	In VimL Script, the variable (and object too) is deleted and freed
	automatically. So there is very few case need to call "class#delete()"
	to delete a object.
	When in case delete object is called, "_del_()" method will call the
	deconstructor function "#dector()" of it's own, and then it's parent
	class upwise, to make any clean work of the class tree.

_ctor_			s:class._ctor_()
	Find the sharp function "#ctor()", so called constructor funtion of 
	self class. Return the FuncRef of that function if existed, otherwise
	the FuncRef refer to "class#ctor()", which is dummy.

_suctor_		s:class._suctor_()
	Return a FuncRef of the constructor "#ctor()" of it's directlly base
	class, or a dummy function if the base has no "#ctor()". In many
	cases, the "#ctor()" of sub-class should call the one of base class,
	with some subset of input arguments, to construct the base part of
	class member.

_dector_		s:class._dector_()
	Find the deconstructor function "#dector()" and return the FuncRef,
	or to a dummy function.

_sudector_		s:class_sudector_()
	Find the deconsturctor function "#dector()" of directlly base class.

_supers_		s:class_supers_()
	Find all base classes, directlly and indirectlly, uptoward the inherit
	tree. Return a list of class name.

_copy_			s:class._copy_(that)
	Called by the copy constructor, a sharp function "#copy()".
	"#ctor()" is used to create object from a dictionary, maybe some base
	class of itself, containing a subset of member data.
	"_copy_()" only copy normal data member key, exclude method key, and
	reserved key in the form "_xxx_".
	The argument "a:that" is the source dictionary or object.

_merger_		s:class._merge_(that)
	Derived interface of class {that}, copy all the keys in {that}, but
	don't overide the already existed keys.
	Add the class name of {that} to the self's "_interface_" list.
	The argument "a:that" must be a class, plain dictionary is not enough.

_isobject_		s:class._isobject_(that)
	Check if the variable {that} is an instance object of self.
	Return boolean |v:ture| or |v:false|.

_isa_			s:class._isa_(that)
	Check if the vairable {that} is an object of class derived from self,
	or if self in an interface of that class.
	Return boolean |v:ture| or |v:false|.

string			s:class.string()
	Convert the object to a string. In the base class, only return "_name_"
	key. User class may overide it to build a more meaning string.

number			s:class.number()
	Convert the object to a number. In the base class, only return the
	"_version_" key. User class may overide to ruturn a more useful value.

--------------------------------------------------------+---------------------
2.3 global sharp function				*class-function*

The private method in the "_xxx_" form key, is suggested never called
directlly, only called from a serial sharp function. Sharp function is in the
global scope, and so is consider as public function.

These sharp function is not method of class, and so user class cannot inherit
from the base class. Each sharp function following should be defined in the
user class file if that one is required. However, some function in the top base
class may have more functionality, can accept a more argument as it's first
argument, represent the class name to be performed, and so that user class may
obsent the sharp function.

#class			class#class(...)
	In user class, "#class()" has no argument, return the definition of
	current class, that is "s:class" dictionary variable.
	In base class, "class#class(name)" can accept class {name} as
	argument. The {name} argument must be full pathed, but can be
	separated by "#" or "." or "/". If the class in under "autoload/class"
	sub-directory, the leading "class#" part can also ommited.
	For example, if "autoload/class/foo/bar.vim" define a class, all the
	following command can obtain the definition of that class: >
		let c = class#foo#bar#class()
		let c = class#class('class#foo#bar')
		let c = class#class('foo#bar')
		let c = class#class('foo.bar')
		let c = class#class('class/foo.bar')
<
	Though mixed use of "[#./]" separator is acceptable, don't use that
	yet.
	Note: the "class#foo#bar#class()" function must defined in the file
	"autoload/class/foo/bar.vim", otherwise the later "class#class(...)"
	version cannot work either.
	This "#class()" function is the only sharp function that must define
	in the user class file.

#new			class#new(...)
	Create a object instance. The user class, for example "tempclass", 
	simply make a copy of the class definition, then call _new_ method:
	>
		function! tempclass#new(...) abort
			let l:obj = copy(s:class)
			call l:obj._new_(a:000)
			return l:obj
		endfunction
<
	In most case, when define a user class, the "#new()" function can follow
	this example.
	In the top base class, "class#new()" function treat the first argument as
	class name from which to create object, and then the rest arugments is 
	passed to "_new_()" method.
	For example, to create object of "class#foo#bar" class, the following two
	manners are OK: >
		let obj = class#foo#bar#new(...)
		let obj = class#new('class#foo#bar', ...)
		let obj = class#new('foo.bar', ...)
<
	The "..." is variable number of arguments, see |a:000|.

#ctor			class#ctor(this, argv)
	This is the constructor function of user class. "#ctor()" is called 
	indirectlly, through "_new_()" method, by "#new()" function.
	When "#ctor()" is called, the object is already created or copied.
	The first argument {a:this} is refer to the just object.
	The second argument {a:argv} is a list of arguments, passed from 
	"#new()" function, which is |a:000| in essence.
	In complex class, the {a:argv} may arbitrary, need carefully deal every
	cases to construct new object.
	In derived class, the "#ctor()" of base class may need to be called in
	some way, it is determined by the implement of derived class.

#dector			class#dector()
#delete			class#delete(this)
	The deconstructor function "#dector()" seldom need. But if really neede,
	it will be called by "class#delete()" function. Usually the user class
	donot need it's own "#delete()", only use "class#delete()" is enough.

#old			class#old(...)
	While "#new()" create object, "#old()" create derived class. When you
	want to derive from some class, call the "#old()" function of that 
	class. If a class will never be used as parent class, then there is no
	need to define "#old()" function.
	In normal user class, the "#old()" function is like: >
		function! tempclass#old() abort
			let l:class = copy(s:class)
			call l:class._old_()
			return l:class
		endfunction
<
	In the top base class, "class#old()" can receive arbitrary number of 
	arguments, the first is treated as "_super_" calss, the other are
	treated as "_interface_" classes. The orders of multiply interfaces
	matters if key conflict existed, the one come first take precedence.

#copy			tempclass#copy(that, ...)
	"#copy()" plays the role of copy constructor function.
	If {a:that} is object of the same class, use the builtin |copy()| or
	|deepcopy()| is ok.
	The main usage of "#copy()" is when {a:that} is object of some base
	class, containing only part of member data. Calling "#copy()" to 
	construct new object based on {a:that}, adding more extra arugments
	if needed.
	{a:that} argument can be plain dictionary, not necessary object.
	The top base class donot define "#copy()" function, since it is mainly
	designed for sub-class, but providing "_copy_()" method to do the hard
	work.

#merge			tempclass#merge(that)
	While "#old()" function is derived as "_super_" class, "#merge()" is
	derived as "_interface_" class, serving for any sub-class.
	Only user class need to define "#merge()" fucntion, like: >
		function! tempclass#merge(that) abort
			call a:that._merge_(s:class)
		endfunction
<
	{a:that} is the sub-class, copy some of self keys to that sub-class.
	For example, to create a sub-class having multiply interfaces: >
		let s:class = sample#base#old()
		call sample#inter1#merge(s:class)
		call sample#inter2#merge(s:class)
<
	Or, use "class#old()" function in one line: >
		 let s:class = class#old('sample#base', 
			 \ 'sample#inter1', 'sample#inter2')
<
	The user class designed to as interface, provide it's own "#merge()"
	function to make more control when some sub-class use it.

#isobject		class#isobject(...)
#isa			class#isa(...)
	The tow functions check if a vairable if belong to self calss, while
	"#isa()" is boarder then "#isobject()".
	When defined in user class, it accept only one arugment: >
		let l:bool = tempclass#isobject(that)
		let l:bool = tempclass#isa(that)
<
	When use the top base class version, the first arugment is class name,
	the second argument is the variable to be check: >
		let l:bool = class#isobject('tempclass', that)
		let l:bool = class#isa('tempclass', that)
<

#instance		class#instance()
	If a class is designed as a singleton class, can define "#instance()"
	function as following: >
		let s:instance = {}
		function! tempclass#instance() abort
		    if empty(s:instance)
			let s:instance = class#new('tempclass')
		    endif
		    return s:instance
		endfunction
<

#import			tempclass#import()
	If a class also want to be used as a module, can define it's own
	"#import()" function, to control the import behaviors. For example: >
		function! tempclass#import() abort
			let l:class = {}
			let l:class.class = s:class
			let l:class.new = function('tempclass#new')
			return l:class
		endfunction
<
	When called this "#import()" function, the client script will get a 
	dictionary with a "class" key save the definition of the class, and a
	"new" key to save the FuncRef of the "#new()" funtion, from which can
	create a new object of that class.
	When the class name become very long, "#import()" may be helpful.
	See the next section for more detail of module.

========================================================+=====================
3. Module Management Scheme				*module.vim*

While class is data with methods, module is mainly focusing on functions to
reuse. In the view of class, it is simpler and easier to create and use module.

To use class, often it need to create an object first, by "#new()" function.
To use module, only need to import that module, then using dictionary key to
index the function from the module.

--------------------------------------------------------+---------------------
3.1 import module					*module#import*

#import			module#import(name, ...)
	The function "module#import()" defined in "autoload/medule.vim" 
	provides a common way to import medules located in autoload script.
	Return a dictionary represent the module, or an empty dictionary if
	fail to import the module.
	The argument {a:name} is the full path name, relative the "autoload"
	int 'runtimepath', or relative the current directory is also allowed.
	The module name can be separated by "#", "." or "/", and if the module
	file is under "autoload/module" sub-directory, the leading "module#"
	can be ommited.
	"module#import()" try to call the following global sharp functions
	defined in the target module file found: >
		target#path#to#module#import()
		target#path#to#module#instance()
		target#path#to#module#class()
<
	In this order, the first one is called and return.

#simport		module#simport(name, ...)
	Read as script import. Much the same as the "#import()", but expects
	the argument {a:name} as absolute path or relative path to current
	directory.  In fact the "module#import()" function may also call this
	"module#simport()" function if fail it's first attempt.

	If all the "imported" functions are not defined in the target module
	file.  Another try to open the source script file, and parse the content
	to extract script local functions and global sharp functions, 
	then return a dictionary containing FuncRef of these function.
	The optional arguments {a:000} in "#import()" or "#simport()" is passed
	to the parser, to specify options to include or exclude some function.
		-S, donot import script localed function
		-g, also import global but non-sharp function
		-n, only import these function match the name
		-u, also import private function name begin with _

#cimport		module#cimport(name, ...)
	Read as class import, designed for a special case when you know the
	target {a:name} is a class file. When fails to call it's "#import()"
	function, get it's class definition by "#class()" function, and then
	build a dictionary with "class" key save the class definition, and
	"new" key save the "#new()" function of the class. That is also the
	suggested stuff to do in the explicitly defined "#import()" function,
	however, you can custom to suit for any need in the explicitly defined 
	"#import()" function.
	
Although these "module#import()" function are powerful, it is suggested to
provide it's own "#import()" function in each module file. It may simple enough
just return a script local dictionary variable, say "s:class".

--------------------------------------------------------+---------------------
3.2 module less package					*module#less*

In the directory "vimloo/autoload/module/less/", is some modules maintained by
myself, following the class manner, each provide it's own "#import()" function.
It is only added when needed, far way from complete or enough.

They can be imported by directlly call it's own "#import()" function, or by
indirectlly call the "module#import()", for example: >
	let s:dict = module#less#dict#import()
	let s:dict = module#import('less.dict')
<

It seems the direct way is a bit shorter.

--------------------------------------------------------+---------------------
3.3 module unite package				*module#unite*

In the directory "vimloo/autoload/module/unite", is the vital utility module
from the |unite.vim| plugin. Each module file in it, is plenty of script local
function. They can be imported by "module#import()" also, for example: >
	let s:List = module#import('unite.Data.List')
<

It is also simple to convert the old style script, to the class-standard
module file:
	first: add a script local dictionary variable in the header >
		let s:class = {}
<
	second: replace all "s:function" to "s:class.function" >
		: g/^\s*function!\?\s\+s:\w\+/s/s:/s:class./
<
	also replce the calling "s:function()" to "s:class.function" if any >
		: %s/s:/s:class./
<
	third: add an import function in the footer >
		function module#unite#Data#List#import()
			return s:class
		endfunction
<

But I havenot do so, make little modification to the origin version.

========================================================+=====================
4. Build Class From Template				*class-builder*

The script "vimloo/autoload/tempclass.vim" is a simplified version of base
"class.vim", it can be served as the template file when create new user class.
The "tempmodule.vim" is a still more simplified version of "tempclass.vim"

:ClassNew {name} [, {filter}]				*:ClassNew*
	Create a new class with {a:name} in a new script file with that name.
	{a:name} is append after the current directory, and then configure out
	the full path class name with "#". If the current directory is not under
	some "autoload/" sub-directory, this command will fail.

:ClassAdd [{filter}]					*:ClassAdd*
	Some like the |:ClassNew|, but add class definition at the current editing
	buffer, named after the current file name. If current file is not under
	"autoload/", this command will also fail.
	The directory containing the "autoload/" is not necessary in the
	'runtimepath' on the time. You can add it to "runtimepath" after the plugin
	project is finished or will be tested.

:ClassTemp [{filter}]					*:ClassTemp*
	Some like the |:ClassAdd|, but donot require the current buffer under
	"autoload/". It only copy (part of) "tempclass.vim" to current buffer
	to check what will generate.
	Use ":ClassTemp -a" read the whole "tempclass.vim" into buffer.

:ClassPart {filter}					*:ClassPart*
	Some line |:ClassAdd|, but only add the parts specified in {a:filter}.
	While |:ClassNew| and |:ClassAdd| whill copy some default parts 
	determined by the "tempclass.vim". It is mainly used after the
	|:ClassNew| or |:ClassAdd| has been executed, and then find neen more
	parts.

:ModuleNew {name} [, {filter}]				*:ModuleNew*
	Same as |ClassNew|, but use "tempmodule.vim" to create a new module
	file. "tempmodule.vim" is much simple, and so only provide command
	"ModuleNew".

The argument {a:filter} in the commands above, is in the form "-xyz" as one
string, each letter control whether a template parts is output, in which 
lowercase indicates output, while uppercase indicates not output.

A part is a paragraph in "tempclass.vim" (or "tempmodule.vim") separated by
blank line. Each part has a head commet line, and at the end of commet line
is the option in the form "-x", where lowercase indicates that this part will
be output by default when |:ClassNew| command etc executed. The arugment
{a:filter} to the command can overide the default option labeled in the 
template file.

Support at most 25 options, except "-a" reserved means "all". However, more
than one paragraphs are allowed to share a same option letter. A paragraph
without option letter indicates must output, since on {a:filter} can disable
it.

Now the valid and default option in "tempclass.vim" is list bellow:
	-h: comment header
	-l: reload control code
	-n: #new() function
	-c: #ctor() function
	-D: #dector() function
	-P: #copy() copy constructor function
	-O: #old() function
	-M: #merge() function
	-s: #isobject() function
	-S: #isa() function
	-I: #instance() function
	-Z: #import() function
	-t: #test() function
So the default option is "-hlncst".

The "tempmodule.vim" supports only few option, and the default is "-hzT".

When use |:ClassNew| commands ect. the name of sharp function will be fixed by
the right name according the class name or module name.

It will be also helpful using "ultisnips" or some like plugin, to generate
the frame code snippet of some type of fucntions. |vimloo| provide a function
to get the full class name as used in the form: >
	`!v cmass#util#GetAutoName(expand('%:p:r'))`
<

The quotation `!v {expr}` in "ultisnips" is refer to a vim expression to get 
the result string as output.

========================================================+=====================
5. Script Micro Command					*script-micro*

In the sub-directory "vimloo/autoload/class/" is some pratical classes, 
following these OOP ideas, while in "vimloo/autoload/cmass" is plain scripts
without class burden, mainly a wrapper to use the class.

Some special commands are provided by |vimloo|, which maybe helpful when 
write and debug Viml Script. I call them as "micro" commands, since vim office
already use the word "macro".

:ClassLoad [-r] [-d|D] [filename]			*:ClassLoad*
	Reload a class or script, after make some modification on developing.
	Normally, the reload control code from "tempclass.vim" will protect a
	script from loading the second, for some reason. However we need
	frequently reload the script when developing and debugging. Then this
	command maybe handful.
	When without argument, default reload the script in current buffer.
	With "-r" option force reload.
	With "-d" option set the "g:DEBUG" variable,
	While "-D" opiton unlet the "g:DEBUG" variable.
	The "g:DEBUG" variable is checked in several cases, to do smart work.

:ClassTest [-f filename] [argument]			*:ClassTest*
	Call the "#test()" function in a script, default the current buffer.
	It is suggested to write a "#test()" function in a script, especially
	class file, as unite test.

:ClassView						*:ClassView*
	Print the members and/or methods of a class, in a more readable way.

:LOGON	{file}						*:LOGON*
:LOGOFF							*:LOGOFF*
	Redir the message to {file}, or stop redir.

:LOG {expr string}					*:LOG*
:SLOG {literal string}					*:SLOG*
	":LOG" require a {expr} as string type, while ":SLOG" requre a literal
	string, for example: >
		:LOG "string"
		:LOG "string" . l:var
		:SLOG string as see
<
	When {string} begin with option-like, it has specail meaning.
	"-number" set the log level of current message
	"-highlight" set the highlight name current message
	If only contain option string without actual message string, then set
	the default log level and highlight.
	When the current log level is smaller than the default log level,
	the current message will be skipped, not echo it.

:ELOG {expr string}					*:ELOG*
:WLOG {expr string}					*:WLOG*
:DLOG {expr string}					*:DLOG*
	With the special highlight name prefix to the message string, and then
	same as ":LOG".
	":ELOG" use "ErrorMsg" highlight
	":WLOG" use "WarningMsg" highlight
	":DLOG" use a virtual "DEBUG" highlight, when "g:DEBUG" not set,
	skip this message.

:PLUGINLOCAL [{file}]					*:PLUGINLOCAL*
:PLUGINAFTER [{file}]					*:PLUGINAFTER*
	These two special commands can only be used in script file, can be 
	used in ex command line.
	":PLUGINLOCAL" means "plugin local", it will search the same file
	but with ".local" extention, in the same directory of the script.
	If such file is found, source that file and finish current scipt.
	":PLUGINAFTER" means "plugin after", it does almost the same thing,
	except default to search ".after" file, and donot finish the current
	script.
	These two commands can also explicitly provide a file, to search for.
	Normally, put ":PLUGINLOCAL" in the header of a script, then that 
	scipt can be customized by a ".local" script, and put ":PLUGINAFTER"
	in the footer of script, then that script can be extended by a 
	".after" script. See |vnote-remap| for a example.

========================================================+=====================
vim:tw=78:ts=8:ft=help:norl:
